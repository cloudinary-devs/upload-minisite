// A minisite generator featuring the Cloudinary Upload Widget
// Blog: https://cloudinary.com/blog/no-code-uploads-to-cloudinary

// To reuse this worker you'll need this setup:
// - A bundled worker
// - Create and bind a worker KV, with the binding CLOUD_CNAME 

"use strict"

export default {
    async fetch(request, env, ctx) {
        try {
            return await handleRequest(request, env, ctx)
        } catch (_err) {
            return new Response('This link doesn\'t work. There is nothing much we can say about it', {
                status: 400,
                headers: {
                    'cache-control': 'public, max-age=600, immutable',
                    'content-type': 'text/html;charset=UTF-8',
                    'X-Robots-Tag': 'noindex',
                }
            })
        }
    },
}

// Fetching and caching a Cloudinary environment custom CNAME
async function getCustomCname(validatedCname, cloudName, env, inputUrl) {
    if (validatedCname.origin !== null)
        return
    validatedCname.origin = await env.CLOUD_CNAME.get(cloudName)
    if (!inputUrl.startsWith(validatedCname.origin + '/')) {
        try {
            const newCnameObj = await fetch(`https://widget.cloudinary.com/info/${cloudName}.json`)
                .then(response => response.json())
            const newCname = `https://${newCnameObj["data-secure-distribution"]}`
            if (newCname != validatedCname.origin) {
                validatedCname.origin = newCname
                await env.CLOUD_CNAME.put(cloudName, newCname)
            }
        } catch(_err) {}
    }
} // getCustomCname

// Sanitizing and encoding the CSS values from the upload minisite configuration object
function sanitizeCSS(string) {
    return (string && string.replaceAll) ? string.replaceAll('<', '%3C').replaceAll('>', '%3E').replaceAll('{', '%7B').replaceAll('}', '%7D') : ''
} // sanitizeCSS

function isGoogleFontUsed(font, style) {
    return font && style && String(style).toLowerCase().includes(String(font).toLowerCase())
} // isGoogleFontUsed

// Sanitizing the media sources of the upload minisite configuration object. Only self-hosted assets are allowed
async function sanitizeSrc(validatedCname, env, imgSrc, cloud) {
    if (imgSrc.startsWith(`https://${cloud}-res.cloudinary.com/`) || imgSrc.startsWith(`https://res.cloudinary.com/${cloud}/`) || imgSrc.startsWith(`https://cloudinary-marketing-res.cloudinary.com/`))
        return imgSrc
    await getCustomCname(validatedCname, cloud, env, imgSrc)
    if (imgSrc.startsWith(validatedCname.origin + '/'))
        return imgSrc
    return ''
} // sanitizeSrc

async function handleRequest(request, env, _ctx) {
    const urlPathName = new URL(request.url).pathname
    const urlPath = urlPathName.split('/')
    const cloud = urlPath[1]
    if (urlPathName == '/robots.txt') {
        return new Response('User-agent: *\nDisallow: /', {
            headers: {
                'cache-control': 'public, max-age=31536000, immutable',
                'content-type': 'text/html;charset=UTF-8',
                'X-Robots-Tag': 'noindex',
            }
        })
    }
    if (!cloud) {
        return Response.redirect('https://cloudinary.com/', 302)
    }
    const configFile = `https://res.cloudinary.com/${cloud}/raw/upload/uploads_minisite/${urlPath.slice(2).join('/')}.json`
    const config = JSON.parse(await fetch(configFile)
                .then(response => response.text())
                .then(response => response.replace(/\s/g," "))
                .catch(err => {throw(err)}))
    const minisite_config = config.minisite_config
    const uw_config = config.upload_widget_config
    const title = minisite_config.title.replaceAll('</','<\\/') || ''
    if (!title)
        throw(new Error('No title'))
    const subtitle = minisite_config.subtitle.replaceAll('</','<\\/') || ''
    const validatedCname = {origin: null}
    const background = await sanitizeSrc(validatedCname, env, minisite_config.backgroundImage || '', cloud)
    const ogImage = await sanitizeSrc(validatedCname, env, minisite_config.opengraphImage || '', cloud)
    delete uw_config.cloudName  // prevent injection
    Object.keys(uw_config).forEach(attr => {
        // Don't pass the JSON comments to the frontend
        if (attr.startsWith('_comment'))
            delete uw_config[attr]
    })
    uw_config.inlineContainer = '#upload_widget'
    const minisiteBg =  background ? `background-image: url('${background}') !important; background-repeat: no-repeat !important; background-size: cover !important` : ''
    const defaultHColor = 'color: ' + ((config.styles && config.styles.palette && config.styles.palette.menuIcons) ? sanitizeCSS(config.styles.palette.menuIcons) : "#5A616A")
    const minisiteH1 = `${sanitizeCSS(minisite_config.titleStyle ? minisite_config.titleStyle : defaultHColor)}`
    const minisiteH2 = `${sanitizeCSS(minisite_config.subtitleStyle? minisite_config.subtitleStyle : defaultHColor)}`
    const inputGoogleFont = sanitizeCSS(minisite_config.googleFont)
    const googleFont = (isGoogleFontUsed(inputGoogleFont, minisiteH1) || isGoogleFontUsed(inputGoogleFont, minisiteH2)) ? 
        `<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=${inputGoogleFont}">` :
        ''

return new Response(`<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>${title}</title>
<link rel="shortcut icon" href="https://res.cloudinary.com/favicon.ico">
<script src="https://upload-widget.cloudinary.com/global/all.js"></script>
<meta name="description" content="Cloudinary upload minisite - ${title.replaceAll('"','&quot;')}${subtitle ? ' | ' + subtitle.replaceAll('"','&quot;') : ''}">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="website">
<meta property="og:title" content="${subtitle.replaceAll('"','&quot;')}">
<meta property="og:description" content="Cloudinary upload minisite">
<meta property="og:image" content="${ogImage}">
<meta property="og:url" content="https://cloudinary.com/">
<meta property="og:site_name" content="${title.replaceAll('"','&quot;')}">
<meta name="twitter:card" content="summary_large_image">
${googleFont}
<style>
body {${minisiteBg}}
#upload_widget {max-width: 900px; margin: auto;}
h1 {${minisiteH1}}
h2 {${minisiteH2}}
</style>
</head>
<body>
<div id="upload_widget">
<h1>${title}</h1>
<h2>${subtitle}</h2>
</div>
<script>
cloudinary.setCloudName('${cloud}')
cloudinary.openUploadWidget(${JSON.stringify(uw_config)})
</script>
</body>
</html>
`, {
        headers: {
            'cache-control': 'public, max-age=31536000, immutable',
            'strict-transport-security': 'max-age=604800',
            'content-type': 'text/html;charset=UTF-8',
            "content-security-policy": `base-uri 'self'; object-src 'none'; default-src 'self' 'unsafe-inline' https://fonts.googleapis.com data: blob: https://fonts.gstatic.com https://upload-widget.cloudinary.com; img-src ${validatedCname.origin !== null ? validatedCname.origin + ' ' : ''}https://res.cloudinary.com https://${cloud}-res.cloudinary.com https://cloudinary-marketing-res.cloudinary.com data:; script-src https://upload-widget.cloudinary.com 'unsafe-inline' blob:; font-src http://res.cloudinary.com https://${cloud}-res.cloudinary.com fonts.gstatic.com; style-src 'unsafe-inline' fonts.googleapis.com`,
            'link': `<${background}>; rel="preload"; as="image", <https://upload-widget.cloudinary.com/global/all.js>; rel="preload"; as="script", <https://fonts.googleapis.com/>; rel="preconnect", <https://fonts.gstatic.com/>; rel="preconnect"; crossorigin, <https://res-s.cloudinary.com>; rel="preconnect", <https://widget.cloudinary.com>; rel="preconnect"; crossorigin`,
            'x-content-type-options': 'nosniff',
            'x-frame-options': 'DENY',
            'x-xss-Protection': '1; mode=block',
            'referrer-policy': 'no-referrer-when-downgrade',
            'x-robots-tag': 'noindex',
        },
    })
}
